buildscript {
	repositories {
		jcenter()
	    maven {
	      url 'http://oss.sonatype.org/content/repositories/snapshots/'
	    }
	}
	dependencies {
		classpath 'org.standardout:bnd-platform:1.7.0-SNAPSHOT'
	}
}

apply plugin: 'org.standardout.bnd-platform'

repositories {
	jcenter()
}

platform {

	// Set a proper path to your eclipse installation (necessary for building a p2 updatesite)
	// eclipseHome = new File('/home/simon/eclipse/eclipse-launcher')

	// configure proper names for the p2 update site
	categoryId = 'Open-Req-Eclipse-Libs'
	categoryName = 'Open Req Eclipse Libs'

	generatePlatformFeature = false

	defaultQualifier = ''
	useBndHashQualifiers = false
	useFeatureHashQualifiers = false
	defaultQualifierMap.prefix = ''

	feature(id: 'Project-Reactor', name: 'Project Reactor', version: '3.1.5') {

		plugin('io.projectreactor:reactor-core:3.1.5.RELEASE') {
			bnd {
				optionalImport 'javax.swing'
				optionalImport 'kotlin'
				optionalImport 'kotlin.jvm.functions'
				optionalImport 'kotlin.jvm.internal'
				optionalImport 'sun.misc'
			}
		}

		plugin('io.projectreactor.addons:reactor-extra:3.1.5.RELEASE') {
			bnd {
				optionalImport 'javax.swing'
				optionalImport 'kotlin'
				optionalImport 'kotlin.jvm.functions'
				optionalImport 'kotlin.jvm.internal'
			}
		}
	}
	
	feature(id: 'Retrofit', name: 'Retrofit', version: '2.4.0') {
		// Convert the retrofit artifact to OSGi, make android.os optional and handle the split package problems in OSGi
		plugin('com.squareup.retrofit2:retrofit:2.4.0'){
			bnd {
				optionalImport 'android.os'
				optionalImport 'android.net'
		    	}
		}
	
		// Convert the retrofit jackson converter artifact to OSGi and handle the split package problems in OSGi
		plugin('com.squareup.retrofit2:converter-jackson:2.3.0')

		// lets retrofit return reactor types
		plugin('com.jakewharton.retrofit:retrofit2-reactor-adapter:2.1.0')
	
		// Convert okhttp3 artifact to OSGi without android
		plugin('com.squareup.okhttp3:okhttp:3.10.0') {
			bnd{
				optionalImport 'android.os'
				optionalImport 'android.util'
				optionalImport 'org.conscrypt'
			}
		}

		plugin('com.squareup.okhttp3:logging-interceptor:3.10.0')
	}

	feature(id: 'logback-classic', name: 'logback-classic', version: '1.2.3') {
		plugin('ch.qos.logback:logback-core:1.2.3') {
			bnd {
				optionalImport 'javax.mail'
				optionalImport 'javax.mail.internet'
				optionalImport 'javax.naming'
				optionalImport 'javax.net'
				optionalImport 'javax.net.ssl'
				optionalImport 'javax.servlet'
				optionalImport 'javax.servlet.http'
				optionalImport 'javax.sql'
				optionalImport 'javax.xml.namespace'
				optionalImport 'javax.xml.parsers'
				optionalImport 'javax.xml.stream'
				optionalImport 'javax.xml.stream.events'
				optionalImport 'org.xml.sax'
				optionalImport 'org.xml.sax.helpers'
				optionalImport 'org.codehaus.janino'
				optionalImport 'org.codehaus.commons.compiler'
				optionalImport 'org.fusesource.jansi'
			}
		}

		plugin('ch.qos.logback:logback-classic:1.2.3') {
			bnd {
				optionalImport 'sun.reflect'
				optionalImport 'javax.management'
				optionalImport 'javax.naming'
				optionalImport 'javax.net'
				optionalImport 'javax.net.ssl'
				optionalImport 'javax.servlet'
				optionalImport 'javax.servlet.http'
				optionalImport 'org.xml.sax'
				optionalImport 'org.codehaus.groovy.control'
				optionalImport 'org.codehaus.groovy.control.customizers'
				optionalImport 'org.codehaus.groovy.reflection'
				optionalImport 'org.codehaus.groovy.runtime'
				optionalImport 'org.codehaus.groovy.runtime.callsite'
				optionalImport 'org.codehaus.groovy.runtime.typehandling'
				optionalImport 'org.codehaus.groovy.runtime.wrappers'
				optionalImport 'org.codehaus.groovy.transform'
				optionalImport 'groovy.lang'		
			}
		}
	}

	feature(id: 'io.micrometer', name: 'io.micrometer', version: '1.0.2') {
		plugin('io.micrometer:micrometer-core:1.0.2') {
			bnd {
				optionalImport 'com.hazelcast.core'
				optionalImport 'com.google.common.cache'
				optionalImport 'com.github.benmanes.caffeine.cache.stats'
				optionalImport 'com.github.benmanes.caffeine.cache'
				optionalImport 'com.codahale.metrics'
				optionalImport 'ch.qos.logback.classic'
				optionalImport 'ch.qos.logback.classic.spi'
				optionalImport 'ch.qos.logback.classic.turbo'
				optionalImport 'ch.qos.logback.core.spi'
				optionalImport 'com.hazelcast.monitor'
				optionalImport 'com.netflix.hystrix'
				optionalImport 'com.netflix.hystrix.metric'
				optionalImport 'com.netflix.hystrix.strategy'
				optionalImport 'com.netflix.hystrix.strategy.concurrency'
				optionalImport 'com.netflix.hystrix.strategy.eventnotifier'
				optionalImport 'com.netflix.hystrix.strategy.executionhook'
				optionalImport 'com.netflix.hystrix.strategy.metrics'
				optionalImport 'com.netflix.hystrix.strategy.properties'
				optionalImport 'com.sun.management'
				optionalImport 'javax.annotation'
				optionalImport 'javax.annotation.meta'
				optionalImport 'javax.cache'
				optionalImport 'javax.management'
				optionalImport 'javax.management.openmbean'
				optionalImport 'javax.persistence'
				optionalImport 'javax.sql'
				optionalImport 'net.sf.ehcache'
				optionalImport 'net.sf.ehcache.statistics'
				optionalImport 'org.apache.catalina'
				optionalImport 'org.aspectj.lang'
				optionalImport 'org.aspectj.lang.annotation'
				optionalImport 'org.aspectj.lang.reflect'
				optionalImport 'org.eclipse.jetty.server.handler'
				optionalImport 'org.hibernate'
				optionalImport 'org.hibernate.stat'
				optionalImport 'rx'
				optionalImport 'rx.functions'
			}
		}
		plugin('io.micrometer:micrometer-registry-atlas:1.0.2')
		
		plugin('io.dropwizard.metrics:metrics-core:3.2.6')
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.7'
}
