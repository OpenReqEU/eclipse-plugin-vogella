buildscript {
	repositories {
		jcenter()
	    maven {
	      url 'http://oss.sonatype.org/content/repositories/snapshots/'
	    }
	}
	dependencies {
		classpath 'org.standardout:bnd-platform:1.7.0-SNAPSHOT'
	}
}

apply plugin: 'org.standardout.bnd-platform'

repositories {
	jcenter()
}

platform {
	// configure proper names for the p2 update site
	categoryId = 'Open-Req-Eclipse-Libs'
	categoryName = 'Open Req Eclipse Libs'

	generatePlatformFeature = false

	defaultQualifier = ''
	useBndHashQualifiers = false
	useFeatureHashQualifiers = false
	defaultQualifierMap.prefix = ''

	feature(id: 'Project-Reactor', name: 'Project Reactor', version: '3.1.5') {

		plugin('io.projectreactor:reactor-core:3.1.5.RELEASE') {
			bnd {
				optionalImport 'javax.swing'
				optionalImport 'kotlin'
				optionalImport 'kotlin.jvm.functions'
				optionalImport 'kotlin.jvm.internal'
				optionalImport 'sun.misc'
			}
		}

		plugin('io.projectreactor.addons:reactor-extra:3.1.5.RELEASE') {
			bnd {
				optionalImport 'javax.swing'
				optionalImport 'kotlin'
				optionalImport 'kotlin.jvm.functions'
				optionalImport 'kotlin.jvm.internal'
			}
		}
	}
	
	feature(id: 'Retrofit', name: 'Retrofit', version: '2.4.0') {
		// Convert the retrofit artifact to OSGi, make android.os optional and handle the split package problems in OSGi
		plugin('com.squareup.retrofit2:retrofit:2.4.0'){
			bnd {
				optionalImport 'android.os'
				optionalImport 'android.net'
		    	}
		}
	
		// Convert the retrofit jackson converter artifact to OSGi and handle the split package problems in OSGi
		plugin('com.squareup.retrofit2:converter-jackson:2.3.0')

		// lets retrofit return reactor types
		plugin('com.jakewharton.retrofit:retrofit2-reactor-adapter:2.1.0')
	
		// Convert okhttp3 artifact to OSGi without android
		plugin('com.squareup.okhttp3:okhttp:3.10.0') {
			bnd{
				optionalImport 'android.os'
				optionalImport 'android.util'
				optionalImport 'org.conscrypt'
			}
		}

		plugin('com.squareup.okhttp3:logging-interceptor:3.10.0')
	}

	feature(id: 'logback-classic', name: 'logback-classic', version: '1.2.3') {
		plugin('ch.qos.logback:logback-core:1.2.3') {
			bnd {
				optionalImport 'javax.mail'
				optionalImport 'javax.mail.internet'
				optionalImport 'javax.naming'
				optionalImport 'javax.net'
				optionalImport 'javax.net.ssl'
				optionalImport 'javax.servlet'
				optionalImport 'javax.servlet.http'
				optionalImport 'javax.sql'
				optionalImport 'javax.xml.namespace'
				optionalImport 'javax.xml.parsers'
				optionalImport 'javax.xml.stream'
				optionalImport 'javax.xml.stream.events'
				optionalImport 'org.xml.sax'
				optionalImport 'org.xml.sax.helpers'
				optionalImport 'org.codehaus.janino'
				optionalImport 'org.codehaus.commons.compiler'
				optionalImport 'org.fusesource.jansi'
			}
		}

		plugin('ch.qos.logback:logback-classic:1.2.3') {
			bnd {
				optionalImport 'sun.reflect'
				optionalImport 'javax.management'
				optionalImport 'javax.naming'
				optionalImport 'javax.net'
				optionalImport 'javax.net.ssl'
				optionalImport 'javax.servlet'
				optionalImport 'javax.servlet.http'
				optionalImport 'org.xml.sax'
				optionalImport 'org.codehaus.groovy.control'
				optionalImport 'org.codehaus.groovy.control.customizers'
				optionalImport 'org.codehaus.groovy.reflection'
				optionalImport 'org.codehaus.groovy.runtime'
				optionalImport 'org.codehaus.groovy.runtime.callsite'
				optionalImport 'org.codehaus.groovy.runtime.typehandling'
				optionalImport 'org.codehaus.groovy.runtime.wrappers'
				optionalImport 'org.codehaus.groovy.transform'
				optionalImport 'groovy.lang'		
			}
		}
	}

	feature(id: 'io.micrometer', name: 'io.micrometer', version: '1.0.2') {
		plugin('io.micrometer:micrometer-core:1.0.2') {
			bnd {
				optionalImport 'com.hazelcast.core'
				optionalImport 'com.google.common.cache'
				optionalImport 'com.github.benmanes.caffeine.cache.stats'
				optionalImport 'com.github.benmanes.caffeine.cache'
				optionalImport 'com.codahale.metrics'
				optionalImport 'ch.qos.logback.classic'
				optionalImport 'ch.qos.logback.classic.spi'
				optionalImport 'ch.qos.logback.classic.turbo'
				optionalImport 'ch.qos.logback.core.spi'
				optionalImport 'com.hazelcast.monitor'
				optionalImport 'com.netflix.hystrix'
				optionalImport 'com.netflix.hystrix.metric'
				optionalImport 'com.netflix.hystrix.strategy'
				optionalImport 'com.netflix.hystrix.strategy.concurrency'
				optionalImport 'com.netflix.hystrix.strategy.eventnotifier'
				optionalImport 'com.netflix.hystrix.strategy.executionhook'
				optionalImport 'com.netflix.hystrix.strategy.metrics'
				optionalImport 'com.netflix.hystrix.strategy.properties'
				optionalImport 'com.sun.management'
				optionalImport 'javax.annotation'
				optionalImport 'javax.annotation.meta'
				optionalImport 'javax.cache'
				optionalImport 'javax.management'
				optionalImport 'javax.management.openmbean'
				optionalImport 'javax.persistence'
				optionalImport 'javax.sql'
				optionalImport 'net.sf.ehcache'
				optionalImport 'net.sf.ehcache.statistics'
				optionalImport 'org.apache.catalina'
				optionalImport 'org.aspectj.lang'
				optionalImport 'org.aspectj.lang.annotation'
				optionalImport 'org.aspectj.lang.reflect'
				optionalImport 'org.eclipse.jetty.server.handler'
				optionalImport 'org.hibernate'
				optionalImport 'org.hibernate.stat'
				optionalImport 'rx'
				optionalImport 'rx.functions'
			}
		}
		plugin('io.micrometer:micrometer-registry-atlas:1.0.2')
		
		plugin('io.dropwizard.metrics:metrics-core:3.2.6')
	}

	feature(id: 'netflix-atlas', name: 'netflix atlas', version: '1.6.0') {
		plugin('com.netflix.atlas_v1:atlas-module-akka_2.12:1.6.0-rc.8') {
			bnd {
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.convert'
				optionalImport 'scala.collection.generic'
				optionalImport 'scala.collection.immutable'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.compat.java8.FunctionConverters'
				optionalImport 'scala.compat.java8.functionConverterImpls'
				optionalImport 'scala.concurrent'
				optionalImport 'scala.concurrent.duration'
				optionalImport 'scala.reflect'
				optionalImport 'scala.runtime'
				optionalImport 'scala.runtime.java8'
				optionalImport 'scala.util'
				optionalImport 'scala.util.matching'
			}
		}
		plugin('com.netflix.atlas_v1:atlas-config_2.12:1.6.0-rc.8') {
			bnd {
				optionalImport 'com.typesafe.config'
				optionalImport 'org.slf4j'
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.reflect'
			}
		}
		plugin('com.netflix.spectator:spectator-reg-atlas:0.70.2') {
			bnd {
				optionalImport 'com.fasterxml.jackson.core'
				optionalImport 'com.fasterxml.jackson.databind'
				optionalImport 'com.fasterxml.jackson.databind.module'
				optionalImport 'com.fasterxml.jackson.dataformat.smile'
				optionalImport 'com.netflix.spectator.api'
				optionalImport 'com.netflix.spectator.atlas.impl'
				optionalImport 'com.netflix.spectator.impl'
				optionalImport 'com.netflix.spectator.sandbox'
				optionalImport 'org.slf4j'
			}
		}
		plugin('com.typesafe.akka:akka-actor_2.12:2.5.13') {
			bnd {
				optionalImport 'scala.compat.java8'
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.convert'
				optionalImport 'scala.collection.generic'
				optionalImport 'scala.collection.immutable'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.collection.parallel'
				optionalImport 'scala.collection.parallel.immutable'
				optionalImport 'scala.concurrent'
				optionalImport 'scala.concurrent.duration'
				optionalImport 'scala.math'
				optionalImport 'scala.reflect'
				optionalImport 'scala.runtime'
				optionalImport 'scala.runtime.java8'
				optionalImport 'scala.sys'
				optionalImport 'scala.util'
				optionalImport 'scala.util.control'
				optionalImport 'scala.util.hashing'
				optionalImport 'com.typesafe.config'
				optionalImport 'akka.testkit'
			}
		}
		plugin('com.typesafe.akka:akka-http_2.12:10.1.3') {
			
		}
		plugin('com.typesafe.akka:akka-http-core_2.12:10.1.3') {
			bnd {
				optionalImport 'scala.compat.java8'
				optionalImport 'akka.parboiled2'
				optionalImport 'akka.parboiled2.support'
				optionalImport 'akka.parboiled2.util'
				optionalImport 'akka.shapeless'
				optionalImport 'akka.macros'
				optionalImport 'akka'
				optionalImport 'akka.actor'
				optionalImport 'akka.dispatch'
				optionalImport 'akka.event'
				optionalImport 'akka.io'
				optionalImport 'akka.japi'
				optionalImport 'akka.japi.function'
				optionalImport 'akka.stream'
				optionalImport 'akka.stream.actor'
				optionalImport 'akka.stream.impl'
				optionalImport 'akka.stream.impl.fusing'
				optionalImport 'akka.stream.impl.io'
				optionalImport 'akka.stream.javadsl'
				optionalImport 'akka.stream.scaladsl'
				optionalImport 'akka.stream.stage'
				optionalImport 'akka.util'
				optionalImport 'com.typesafe.config'
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.convert'
				optionalImport 'scala.collection.generic'
				optionalImport 'scala.collection.immutable'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.collection.parallel'
				optionalImport 'scala.collection.parallel.immutable'
				optionalImport 'scala.concurrent'
				optionalImport 'scala.concurrent.duration'
				optionalImport 'scala.math'
				optionalImport 'scala.reflect'
				optionalImport 'scala.runtime'
				optionalImport 'scala.runtime.java8'
				optionalImport 'scala.util'
				optionalImport 'scala.util.control'
				optionalImport 'scala.util.matching'
				optionalImport 'com.typesafe.sslconfig.akka'
				optionalImport 'com.typesafe.sslconfig.akka.util'
				optionalImport 'com.typesafe.sslconfig.ssl'
				optionalImport 'com.typesafe.sslconfig.util'
				optionalImport 'javax.net.ssl'
				optionalImport 'org.reactivestreams'
			}
		}
		plugin('com.netflix.atlas_v1:atlas-json_2.12:1.6.0-rc.10') {
			bnd {
				optionalImport 'com.fasterxml.jackson.annotation'
				optionalImport 'com.fasterxml.jackson.core'
				optionalImport 'com.fasterxml.jackson.core.type'
				optionalImport 'com.fasterxml.jackson.databind'
				optionalImport 'com.fasterxml.jackson.databind.deser'
				optionalImport 'com.fasterxml.jackson.databind.deser.std'
				optionalImport 'com.fasterxml.jackson.databind.introspect'
				optionalImport 'com.fasterxml.jackson.databind.type'
				optionalImport 'com.fasterxml.jackson.databind.util'
				optionalImport 'com.fasterxml.jackson.dataformat.smile'
				optionalImport 'com.fasterxml.jackson.datatype.joda'
				optionalImport 'com.fasterxml.jackson.module.scala'
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.generic'
				optionalImport 'scala.collection.immutable'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.reflect'
				optionalImport 'scala.reflect.api'
				optionalImport 'scala.reflect.runtime'
				optionalImport 'scala.runtime'
			}
		}
		plugin('com.netflix.atlas_v1:atlas-module-lwcapi_2.12:1.6.0-rc.8') {
			bnd {
				optionalImport 'akka.actor'
				optionalImport 'akka.event'
				optionalImport 'akka.http.scaladsl.common'
				optionalImport 'akka.http.scaladsl.marshalling'
				optionalImport 'akka.http.scaladsl.model'
				optionalImport 'akka.http.scaladsl.model.headers'
				optionalImport 'akka.http.scaladsl.server'
				optionalImport 'akka.http.scaladsl.server.directives'
				optionalImport 'akka.http.scaladsl.server.util'
				optionalImport 'akka.http.scaladsl.unmarshalling'
				optionalImport 'akka.stream.actor'
				optionalImport 'akka.stream.scaladsl'
				optionalImport 'com.fasterxml.jackson.core'
				optionalImport 'com.netflix.atlas.akka'
				optionalImport 'com.netflix.atlas.config'
				optionalImport 'com.netflix.atlas.core.index'
				optionalImport 'com.netflix.atlas.core.model'
				optionalImport 'com.netflix.atlas.core.stacklang'
				optionalImport 'com.netflix.atlas.core.util'
				optionalImport 'com.netflix.atlas.json'
				optionalImport 'com.netflix.frigga'
				optionalImport 'com.netflix.iep'
				optionalImport 'com.netflix.spectator.api'
				optionalImport 'com.typesafe.config'
				optionalImport 'com.typesafe.scalalogging'
				optionalImport 'javax.inject'
				optionalImport 'org.reactivestreams'
				optionalImport 'org.slf4j'
				optionalImport 'scala'
				optionalImport 'scala.collection'
				optionalImport 'scala.collection.convert'
				optionalImport 'scala.collection.generic'
				optionalImport 'scala.collection.immutable'
				optionalImport 'scala.collection.mutable'
				optionalImport 'scala.concurrent'
				optionalImport 'scala.concurrent.duration'
				optionalImport 'scala.math'
				optionalImport 'scala.reflect'
				optionalImport 'scala.runtime'
				optionalImport 'scala.runtime.java8'
				optionalImport 'scala.util.control'
			}
		}
		plugin('com.netflix.atlas_v1:atlas-module-webapi_2.12:1.6.0-rc.8') {
			bnd {
				optionalImport 'com.google.inject'
				optionalImport 'com.google.inject.binder'
				optionalImport 'com.netflix.atlas.core.db'
				optionalImport 'com.netflix.atlas.webapi'
				optionalImport 'com.netflix.iep.guice'
				optionalImport 'scala.reflect'
			}
		}
	}

	feature(id: 'jcommander', name: 'jcommander', version: '1.71.0') {
			plugin('com.beust:jcommander:1.71')
	 }

	feature(id: 'zt-process-killer', name: 'zt-process-killer', version: '1.8.0') {
			plugin('org.zeroturnaround:zt-process-killer:1.8')
	 }
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.7'
}
